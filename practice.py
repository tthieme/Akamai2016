## Copyright (C) 2016
## Written by Travis Thieme <tthieme@hawaii.edu>
## University of Hawai`i at Hilo
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

# -*- coding: utf-8 -*-

##########################
## Load required modules##
##########################
import numpy as np
import scipy as sp
#import sympy as sy
#import statsmodels as stats
#import astropy as astro
#import math as m
import matplotlib.pyplot as plt
import mayavi.mlab as ml
#import pyqtgraph as pyqtg
#import wx as wxp

#import pandas
#import pyrr
#import random
import time 
#import pdb

#from scipy import special
#from tvtk.api import tvtk

## ###################################
##
## Author: Travis Thieme
## Created on: June 29th, 2016
##
## Application Name: 
## Programming Language: Python
## 
## Description: This program 
## 
## ###################################

# Project Info
name = 'Travis Thieme'
date  = time.strftime("%d/%m/%Y")
clock = time.strftime("%H:%M:%S %Z")

def project_info(project = ''):

    """
    This function prints the info for the project your working on. Info such as author,
    date, current time, and the project name.
    """
    
    name = 'Travis Thieme'
    date = time.strftime("%A, %d/%m/%Y")
    clock = time.strftime("%H:%M:%S %Z")
    project_name = project

    print name
    print date
    print clock
    print project_name


def mayavi_plt():
    
    ml.test_plot3d()
    arr = ml.screenshot()
    ml.close()

    plt.imshow(arr)
    plt.axis('off')
    plt.show()

def mayavi_demo():

    x = np.linspace(-10,10,100)
    y = np.linspace(-10,10,100)
    #m, n = np.meshgrid(x, y)
    z = x*np.sin(x)*np.cos(y)
    
    ml.figure(bgcolor=(1,1,1), fgcolor=(0,0,0))
    ml.plot3d(x, y, z,tube_radius=0.1)
    ml.axes(extent=[-10,10,-10,10,-10,10], x_axis_visibility=False, y_axis_visibility=False, z_axis_visibility=False)
    ml.view(0, 0)
    fig = ml.gcf()
    
    #fig.scene.interactor.interactor_style = tvtk.InteractorStyleImage()
    fig.scene.x_plus_view()
    ml.show()
    
def fig_2d():
    
    ml.test_imshow()
    ml.view(0, 0)
    #fig = ml.gcf()

    #fig.scene.interactor.interactor_style = tvtk.InteractorStyleImage()
    ml.show()
    
def mayavi():
    
    # bessel scaling
    #v_scale = 1
    h_scale = 1
    
    # model parameters
    R = 3.8918
    k = [] # hold calculated k components
    k.append(10.9549) # k_1, k[0]
    k.append(10.4608) # k_2, k[1]
    k.append(10.6320) # k_3, k[2]
    h = 0.3257
    B_0 = 3.3118 
    
    # need to be generated by mgrid for 3D arrays
    xx, yy, zz = np.mgrid[-0.5:0.5:10j, -0.5:0.5:10j, -0.5:0.5:100j]*R
    rr = np.sqrt(xx*xx+yy*yy)
    
    # equation constants
    lambda_m = []
    Bx = 0
    By = 0
    Br = 0
    Bz = 0

    # find first three bessel roots
    a_m = (sp.special.jn_zeros(1, 3))/h_scale
    
    # find first three lambda_m's
    for i in range(3):
      
      lambda_m.append((a_m[i]/R)**2)
    
    ############################################################  
    ## import mayavi as maya 
    ## Br = sqrt(Bx*Bx+By*By)
    ## theta = arctan(y/x)
    ## Bx = Br*cos(theta)
    ## By = Brefresh mayavi figure in same scener*sin(theta)
    ############################################################  
    ## mayavi.mlab.quiver3d(x, y, z, u, v, w, ...)
    ##
    ## If 6 arrays, (x, y, z, u, v, w) are passed, the 
    ## 3 first arrays give the position of the arrows, and 
    ## the 3 last the components. They can be of any shape.
    ############################################################  
    
    # calculate first three summations of Br and Bz    
    for j in range(3):
      
      Br += B_r(rr, zz, k[j], lambda_m[j], h)
      Bz += B_z(rr, zz, k[j], lambda_m[j], h, B_0)
    
    # calculate theta, 
    theta = np.arctan2(yy,xx) # use arctan2 for choosing the quadrant correctly
    
    # calculate Bx and By
#    Bx = Br*np.cos(theta)*density2(xx, yy, zz)
#    By = Br*np.sin(theta)*density2(xx, yy, zz)
#    Bz *= density2(xx, yy, zz)
    Bx = Br*np.cos(theta)
    By = Br*np.sin(theta)
    Bz = Bz
    

    
    ############################################################
    ## get the normals of the By and Bz vector
    ## we dont care about Bx because we will integrate along x
    ## we can take By and Bz to calculate an angle theta
    ## then add 90 degrees to the angle for an 
    ## orthogonal vector
    ## calculate Q and U of stokes parameters (2d arrays)
    ## sum up each iteration and add it to an array to plot
    ############################################################
    
    np.set_printoptions(threshold='nan')
    Sq = np.empty([10,100])
    Su = np.empty([10,100])
    #SD = np.empty([10,100])
    
    # intervals for r and z values
    r = np.linspace(-R, R, 100)
    z = np.linspace(-R, R, 10)
    
    # make a mesh grid for contour plot
    x, y = np.meshgrid(r,z)
    
    for k in range(100):
      
      for j in range(10):
        
        Sq[j][k] = 0
        Su[j][k] = 0
        #SD[j][k] = 0
        
        for i in range(10):
          
          Byy = By[i][j][k]
          Bzz = Bz[i][j][k]
          #print By[i][j][k]
          
          theta = np.arctan2(Bzz,Byy)
          theta_p = (np.pi/2) + theta
          
          Q = np.cos(2*theta_p)
          U = np.sin(2*theta_p)
          #D = density2(i, j, k)
          
          
          Sq[j][k] += Q
          Su[j][k] += U
          #SD[j][k] += D
         
    #print x
    print Sq
    #print Su
    #print np.shape(Sq)
    #print np.shape(Su)
    
    # figure 1
    plt.figure(1, figsize=(8,4))
    plt.suptitle('Stokes Parameter Plots', fontsize=12, fontweight='bold') # Title for whole figure
    plt.figtext(0.01,0.97,'Created by: ' + name, size=5) # Add created by to top left corner
    plt.figtext(0.01,0.95, 'Todays Date: '  + date, size=5) # Add date to top left corner
    plt.figtext(0.01,0.93,'Time:  ' + clock, size=5) # Add clock time to top left corner
    
    plt.subplot(1,2,1) 
    cp1 = plt.contour(x,y,Sq)
    plt.title('\n\n$Q$', fontsize=8)
    plt.xlabel('$z$', fontsize=8)
    plt.ylabel('$y$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.clabel(cp1, inline = True, fontsize = 3)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize = 5) # change number size on colorbar
    
    plt.subplot(1,2,2) 
    cp1 = plt.contour(x,y,Su)
    plt.title('\n\n$U$', fontsize=8)
    plt.xlabel('$z$', fontsize=8)
    plt.ylabel('$y$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.clabel(cp1, inline = True, fontsize = 3)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize = 5) # change number size on colorbar
    
    plt.tight_layout()
    plt.savefig('stokes_param.png', dpi = 800)
    plt.show()
    
    # plot components in Mayavi
    #ml.figure(fgcolor=(0, 0, 0))
    #ml.quiver3d(xx,yy,zz,Bx,By,Bz, colormap='spectral', mode='2ddash')
    #ml.show()
    
    '''
    201.685558783
    52.6373670495
    8.77349747277
    '''
    
    
def B_r(r, z, k_m, lambda_m, h):
    
    """
    This function eturns an expression for Br
    """
    
    # compontents
    a = k_m
    b = np.sqrt(lambda_m)
    c = h

    return a*b*sp.special.j1(b*r)*((sp.special.erfc((b*c)/2 - (z/c))*np.exp((-b*z))) - (sp.special.erfc((b*c)/2 + (z/c))*np.exp((b*z))))
    
def B_z(r, z, k_m, lambda_m, h, B_0):
    
    """   
    This function returns an expression for Bz
    """
    
    # compontents
    a = k_m
    b = np.sqrt(lambda_m)
    c = h
    
    return a*b*sp.special.j0(b*r)*((sp.special.erfc((b*c)/2 + (z/c))*np.exp((b*z))) + (sp.special.erfc((b*c)/2 - (z/c))*np.exp((-b*z))))+B_0
    
def density(x, y, z, R, h):
    
    """   
    This function returns an expression for density
    """
    
    # parameters
    row_0 = 10**7
    
    return row_0*np.exp(-(x*x+y*y)/R*R)*np.exp(-(z*z)/h*h)
    
def density2(x, y, z):
    
    """   
    This function returns an expression for density
    """
    
    # parameters
    row_0 = 10**7
    A = 0.3
    B = 0.3
    
    return row_0*np.exp(-(x*x+y*y)/A*A)*np.exp(-(z*z)/B*B)
    
    