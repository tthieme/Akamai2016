## Copyright (C) 2016
## Written by Travis Thieme <tthieme@hawaii.edu>
## University of Hawai`i at Hilo
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

##########################
## Load required modules##
##########################

import numpy as np
import scipy as sp
#import sympy as sy
#import statsmodels as stats
#import astropy as astro
#import math as m
import matplotlib.pyplot as plt
import mayavi.mlab as ml
#import pyqtgraph as pyqt
#import wx as wxp

#import pandas
#import random
import time 
#import pdb


## ###################################
##
## Author: Travis Thieme
## Created on: June 29th, 2016
##
## Application Name: 
## Programming Language: Python
## 
## Description: This program 
## 
## ###################################

# Project Info
name = 'Travis Thieme'
date  = time.strftime("%d/%m/%Y")
clock = time.strftime("%H:%M:%S %Z")

def project_info(project = ''):

    """
    This function prints the info for the project your working on. Info such as author,
    date, current time, and the project name.
    """
    
    name = 'Travis Thieme'
    date = time.strftime("%A, %d/%m/%Y")
    clock = time.strftime("%H:%M:%S %Z")
    project_name = project

    print name
    print date
    print clock
    print project_name

def plot_bessel():
    
    """
    This function plots the J1 bessel function.
    """
    
    # set interval
    start = 0
    end = 20
    
    # set values for distribution
    A = 1
    b = 3
    
    # linearly spaced numbers from -10 to 10 with 100 increments
    x = np.linspace(start,end,100)
    y = bessel_j1(x, A, b)
    
    # find first three bessel roots
    a_m = (sp.special.jn_zeros(1, 3))/b
    print a_m[0]
    
    plt.clf() # clear plot
    plt.title('Bessel Plot') # plot title
    plt.figtext(0.01,0.95,'Created by: ' + name) # Add created by to top left corner
    plt.figtext(0.72,0.95, 'Todays Date: '  + date) # Add date to top right corner
    plt.plot(x, np.zeros(len(x)), 'k')    
    plt.plot(x,y, 'b', label = '$J_1$') # plot origional
    plt.xlabel('x') # label x axis
    plt.ylabel('y') # label y axis
    plt.legend() # show legend
    plt.grid(True) # show grid lines
    plt.show() # show plot
  
def bessel_j1(x, A, b):  

    """
    This function calculates the J1 bessel function.
    """
    
    return A*sp.special.j1(b*x)
    
def mag_field():
  
    """
    This function makes four separate plots. The first plot is 
    two contour plots for Br and Bz. The second plot is two 
    contour plots for arctan(Bz/Br) and sqrt(Br^2+Bz^2). The 
    third plot is two line plots for the z-component and the
    r-compontent, both with modified z values. The last plot 
    is our graph of our magnetic field model. 
    """
    
    ###FIRST FIGURE###
    
    # bessel scaling
    #v_scale = 1
    h_scale = 1
    
    # model parameters
    R = 3.8918
    k = [] # hold calculated k components
    k.append(0.9549) # k_1, k[0]
    k.append(0.4608) # k_2, k[1]
    k.append(0.6320) # k_3, k[2]
    h = 0.3257
    B_0 = 3.3118 
    
    # intervals for r and z values
    r = np.linspace(-1, 1, 100)*R
    z = np.linspace(-0.5, 0.5, 100)*R
    
    # equation constants
    lambda_m = []
    Br = 0
    Bz = 0
    
    # equation constants 3D
    B_x = 0
    B_y = 0
    B_z = 0
    B_r = 0
    B_z = 0

    # find first three bessel roots
    a_m = (sp.special.jn_zeros(1, 3))/h_scale
    
    # find first three lambda_m's
    for i in range(3):
      
      lambda_m.append((a_m[i]/R)**2)
    
    # make a mesh grid for contour plot
    x, y = np.meshgrid(r, z)
    
    # calculate first three summations of Br and Bz    
    for j in range(3):
      
      Br += B_r_calc(x, y, k[j], lambda_m[j], h)
      Bz += B_z_calc(x, y, k[j], lambda_m[j], h, B_0)
    
    ###THIRD FIGURE###
    
    # substituting values for curve graphs
    z1 = 0
    z2 = 0.26*R
    Bz0 = 0
    Br0 = 0
    
    # calculate first three summations of Br and Bz with modified z's
    # for line graph
    for u in range(3):
      Bz0 += B_z_calc(r, z1, k[u], lambda_m[u], h, B_0)/B_0
      Br0 += B_r_calc(r, z2, k[u], lambda_m[u], h)/B_0
    
    ###3D Plot###
    
    # need to be generated by mgrid for 3D arrays
    # must change j parameters with size of r and z
    xx, yy, zz = np.mgrid[-0.5:0.5:10j, -0.5:0.5:10j, -0.5:0.5:100j]*R
    rr = np.sqrt(xx*xx+yy*yy)
    
    # calculate first three summations of Br and Bz    
    for j in range(3):
      
      B_r += B_r_calc(rr, zz, k[j], lambda_m[j], h)
      B_z += B_z_calc(rr, zz, k[j], lambda_m[j], h, B_0)
    
    # calculate theta for Bx and By
    theta = np.arctan2(yy,xx) # use arctan2 for choosing the quadrant correctly
    
    # calculate Bx, By and Bz for 3d plot
    B_x = B_r*np.cos(theta)
    B_y = B_r*np.sin(theta)
    B_z = B_z
#    B_x = B_r*np.cos(theta)*density2(xx, yy, zz)
#    B_y = B_r*np.sin(theta)*density2(xx, yy, zz)
#    B_z *= density2(xx, yy, zz)
    
    ###Stokes Parameters###
    
    ############################################################
    ## get the normals of the By and Bz vector
    ## we dont care about Bx because we will integrate along x
    ## we can take By and Bz to calculate an angle theta
    ## then add 90 degrees to the angle for an 
    ## orthogonal vector
    ## calculate Q and U of stokes parameters (2d arrays)
    ## sum up each iteration and add it to an array to plot
    ############################################################
    
    np.set_printoptions(threshold='nan') # print everything in array
    
    # intervals for stokes r and z values
    rs = np.linspace(-1, 1, 100)*R
    zs = np.linspace(-0.5, 0.5, 10)*R
    
    # make a mesh grid for stokes contour plot
    xs, ys = np.meshgrid(rs, zs)
    
    # initialize stokes array
    Sq = np.empty([10,100])
    Su = np.empty([10,100])
    
    for k in range(100):
      
      for j in range(10):
        
        Sq[j][k] = 0
        Su[j][k] = 0
        
        for i in range(10):
          
          Byy = B_y[i][j][k]
          Bzz = B_z[i][j][k]
          
          theta = np.arctan2(Bzz,Byy)
          theta_p = (np.pi/2) + theta
          
          Q = np.cos(2*theta_p)
          U = np.sin(2*theta_p)
          
          
          Sq[j][k] += Q
          Su[j][k] += U
    
    ###PLOTTING###

    # figure 1
    plt.figure(1, figsize=(8,4))
    plt.suptitle('Magnetic Field Plots', fontsize=12, fontweight='bold') # Title for whole figure
    plt.figtext(0.01,0.97,'Created by: ' + name, size=5) # Add created by to top left corner
    plt.figtext(0.01,0.95, 'Todays Date: '  + date, size=5) # Add date to top left corner
    plt.figtext(0.01,0.93,'Time:  ' + clock, size=5) # Add clock time to top left corner
    
    plt.subplot(1,2,1) 
    cp1 = plt.contour(x, y, Br)
    plt.title('\n\n$B_r$', fontsize=8)
    plt.xlabel('$r$', fontsize=8)
    plt.ylabel('$z$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.clabel(cp1, inline = True, fontsize = 3)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize = 5) # change number size on colorbar
    
    plt.subplot(1,2,2)
    cp2 = plt.contour(x, y, Bz)
    plt.title('\n\n$B_z$', fontsize=8)
    plt.xlabel('$r$', fontsize=8)
    plt.ylabel('$z$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.clabel(cp2, inline = True, fontsize = 3)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize = 5) # change number size on colorbar
    
    plt.tight_layout()
    plt.savefig('mag_field_plots_1.png', dpi = 800)
    plt.show()

    # figure 2
    plt.figure(2, figsize=(8,4))
    plt.suptitle('Magnetic Field Plots', fontsize=12, fontweight='bold') # Title for whole figure
    plt.figtext(0.01,0.97,'Created by: ' + name, size=5) # Add created by to top left corner
    plt.figtext(0.01,0.95, 'Todays Date: '  + date, size=5) # Add date to top left corner
    plt.figtext(0.01,0.93,'Time:  ' + clock, size=5) # Add clock time to top left corner
    
    plt.subplot(1,2,1)
    cp2 = plt.contour(x, y, np.arctan(Bz/Br))
    plt.title('\n\n$arctan^{-1}(B_z/B_r)$', fontsize=8)
    plt.xlabel('$r$', fontsize=8)
    plt.ylabel('$z$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.clabel(cp2, inline = True, fontsize = 3)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize = 5) # change number size on colorbar
    
    plt.subplot(1,2,2)
    cp2 = plt.contour(x, y, np.sqrt((Bz**2)+(Br**2)))
    plt.title('\n\n$\sqrt{Bz^{2}+Br^{2}}$', fontsize=8)
    plt.xlabel('$r$', fontsize=8)
    plt.ylabel('$z$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.clabel(cp2, inline = True, fontsize = 3)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize = 5) # change number size on colorbar
    
    plt.tight_layout()
    plt.savefig('mag_field_plots_2.png', dpi = 800)
    plt.show()
    
    # figure 3
    plt.figure(3, figsize=(8,4))
    plt.suptitle('Magnetic Field Plots', fontsize=12, fontweight='bold') # Title for whole figure
    plt.figtext(0.01,0.97,'Created by: ' + name, size=5) # Add created by to top left corner
    plt.figtext(0.01,0.95, 'Todays Date: '  + date, size=5) # Add date to top left corner
    plt.figtext(0.01,0.93,'Time:  ' + clock, size=5) # Add clock time to top left corner
    
    plt.subplot(1,2,1)
    plt.plot(r, Bz0)
    plt.title('\n\n$z-component$ $at$ $z=0$', fontsize=8)
    plt.xlabel('$r$', fontsize=8)
    plt.ylabel('$B_z$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.legend()
    
    plt.subplot(1,2,2)
    plt.plot(r, Br0)
    plt.title('\n\n$r-component$ $at$ $z=0.26R$', fontsize=8)
    plt.xlabel('$r$', fontsize=8)
    plt.ylabel('$B_r$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('mag_field_plots_3.png', dpi = 800)
    plt.show()
    
    # figure 4
    plt.figure(4, figsize=(8,8))
    plt.figtext(0.01,0.97,'Created by: ' + name, size=5) # Add created by to top left corner
    plt.figtext(0.01,0.95, 'Todays Date: '  + date, size=5) # Add date to top left corner
    plt.figtext(0.01,0.93,'Time:  ' + clock, size=5) # Add clock time to top left corner
    
    plt.streamplot(r, z, Br, Bz)
    plt.title('\n\n$Model$ $of$ $Magnetic$ $Field$ $Lines$', fontsize=16)
    plt.xlabel('$r$', fontsize=14)
    plt.ylabel('$z$', fontsize=14)
    plt.xticks(fontsize=8)
    plt.yticks(fontsize=8)
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('mag_field_plots_4.png', dpi = 800)
    plt.show()
    
    # figure 5
    plot_full_magfield(k, lambda_m, h, B_0, R)
    
    # figure 6
    ############################################################  
    ## import mayavi as maya 
    ## Br = sqrt(Bx*Bx+By*By)
    ## theta = arctan(y/x)
    ## Bx = Br*cos(theta)
    ## By = Brefresh mayavi figure in same scener*sin(theta)
    ############################################################  
    ## mayavi.mlab.quiver3d(x, y, z, u, v, w, ...)
    ##
    ## If 6 arrays, (x, y, z, u, v, w) are passed, the 
    ## 3 first arrays give the position of the arrows, and 
    ## the 3 last the components. They can be of any shape.
    ############################################################ 
    
    # plot components in Mayavi
    ml.figure(fgcolor=(0, 0, 0))
    ml.quiver3d(xx,yy,zz,B_x,B_y,B_z, colormap='spectral', mode='2ddash')
    ml.show()
    
    # figure 7
    plt.figure(7, figsize=(8,4))
    plt.suptitle('Stokes Parameter Plots', fontsize=12, fontweight='bold') # Title for whole figure
    plt.figtext(0.01,0.97,'Created by: ' + name, size=5) # Add created by to top left corner
    plt.figtext(0.01,0.95, 'Todays Date: '  + date, size=5) # Add date to top left corner
    plt.figtext(0.01,0.93,'Time:  ' + clock, size=5) # Add clock time to top left corner
    
    plt.subplot(1,2,1) 
    cp1 = plt.contour(xs,ys,Sq)
    plt.title('\n\n$Q$', fontsize=8)
    plt.xlabel('$r$', fontsize=8)
    plt.ylabel('$z$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.clabel(cp1, inline = True, fontsize = 3)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize = 5) # change number size on colorbar
    
    plt.subplot(1,2,2) 
    cp1 = plt.contour(xs,ys,Su)
    plt.title('\n\n$U$', fontsize=8)
    plt.xlabel('$r$', fontsize=8)
    plt.ylabel('$z$', fontsize=8)
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.clabel(cp1, inline = True, fontsize = 3)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize = 5) # change number size on colorbar
    
    plt.tight_layout()
    plt.savefig('stokes_param.png', dpi = 800)
    plt.show()
    
def B_r_calc(r, z, k_m, lambda_m, h):
    
    """
    This function eturns an expression for Br
    """
    
    # compontents
    a = k_m
    b = np.sqrt(lambda_m)
    c = h
    
    return a*b*sp.special.j1(b*r)*((sp.special.erfc((b*c)/2 - (z/c))*np.exp((-b*z))) - (sp.special.erfc((b*c)/2 + (z/c))*np.exp((b*z))))
    
def B_z_calc(r, z, k_m, lambda_m, h, B_0):
    
    """   
    This function returns an expression for Bz
    """
    
    # compontents
    a = k_m
    b = np.sqrt(lambda_m)
    c = h
    
    return a*b*sp.special.j0(b*r)*((sp.special.erfc((b*c)/2 + (z/c))*np.exp((b*z))) + (sp.special.erfc((b*c)/2 - (z/c))*np.exp((-b*z))))+B_0
    
def plot_full_magfield(k, lambda_m, h, B_0, R):    
    
    """   
    This function graphs our magnetic field model from r = (-1,1)
    """
    
    # intervals for r and z values
    r = np.linspace(-1, 1, 100)*R
    z = np.linspace(-0.5, 0.5, 100)*R
    
    # equation constants
    Br = 0
    Bz = 0
    
    # make a mesh grid for contour plot
    x, y = np.meshgrid(r, z)
    
    # calculate first three summations of Br and Bz    
    for j in range(3):
      
      Br += B_r_calc(x, y, k[j], lambda_m[j], h)
      Bz += B_z_calc(x, y, k[j], lambda_m[j], h, B_0)
    
    plt.figure(5, figsize=(8,8))
    plt.figtext(0.01,0.97,'Created by: ' + name, size=5) # Add created by to top left corner
    plt.figtext(0.01,0.95, 'Todays Date: '  + date, size=5) # Add date to top left corner
    plt.figtext(0.01,0.93,'Time:  ' + clock, size=5) # Add clock time to top left corner
    
    plt.streamplot(r, z, Br, Bz)
    plt.title('\n\n$Model$ $of$ $Magnetic$ $Field$ $Lines$ $from$ $(-1,1)$', fontsize=16)
    plt.xlabel('$r$', fontsize=14)
    plt.ylabel('$z$', fontsize=14)
    plt.xticks(fontsize=8)
    plt.yticks(fontsize=8)
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('mag_field_plots_5.png', dpi = 800)
    plt.show()
    
